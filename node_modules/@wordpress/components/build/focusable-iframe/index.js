"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = FocusableIframe;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

/**
 * WordPress dependencies
 */
function FocusableIframe(_ref) {
  var iframeRef = _ref.iframeRef,
      onFocus = _ref.onFocus,
      props = (0, _objectWithoutProperties2.default)(_ref, ["iframeRef", "onFocus"]);
  var fallbackRef = (0, _element.useRef)();
  var ref = iframeRef || fallbackRef;
  (0, _element.useEffect)(function () {
    var iframe = ref.current;
    var ownerDocument = iframe.ownerDocument;
    var defaultView = ownerDocument.defaultView;
    var FocusEvent = defaultView.FocusEvent;
    /**
     * Checks whether the iframe is the activeElement, inferring that it has
     * then received focus, and calls the `onFocus` prop callback.
     */

    function checkFocus() {
      if (ownerDocument.activeElement !== iframe) {
        return;
      }

      var focusEvent = new FocusEvent('focus', {
        bubbles: true
      });
      iframe.dispatchEvent(focusEvent);

      if (onFocus) {
        onFocus(focusEvent);
      }
    }

    defaultView.addEventListener('blur', checkFocus);
    return function () {
      defaultView.removeEventListener('blur', checkFocus);
    };
  }, [onFocus]); // Disable reason: The rendered iframe is a pass-through component,
  // assigning props inherited from the rendering parent. It's the
  // responsibility of the parent to assign a title.
  // eslint-disable-next-line jsx-a11y/iframe-has-title

  return (0, _element.createElement)("iframe", (0, _extends2.default)({
    ref: ref
  }, props));
}
//# sourceMappingURL=index.js.map