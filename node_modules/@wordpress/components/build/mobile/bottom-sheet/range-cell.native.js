"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _element = require("@wordpress/element");

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _reactNative = require("react-native");

var _slider = _interopRequireDefault(require("@react-native-community/slider"));

var _i18n = require("@wordpress/i18n");

var _compose = require("@wordpress/compose");

var _cell = _interopRequireDefault(require("./cell"));

var _rangeCell = _interopRequireDefault(require("./range-cell.scss"));

var _rangeTextInput = _interopRequireDefault(require("./range-text-input"));

var _utils = require("../utils");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var isIOS = _reactNative.Platform.OS === 'ios';

var BottomSheetRangeCell = /*#__PURE__*/function (_Component) {
  (0, _inherits2.default)(BottomSheetRangeCell, _Component);

  var _super = _createSuper(BottomSheetRangeCell);

  function BottomSheetRangeCell(props) {
    var _this;

    (0, _classCallCheck2.default)(this, BottomSheetRangeCell);
    _this = _super.call(this, props);
    _this.onChangeValue = _this.onChangeValue.bind((0, _assertThisInitialized2.default)(_this));
    _this.onChange = _this.onChange.bind((0, _assertThisInitialized2.default)(_this));
    _this.onCellPress = _this.onCellPress.bind((0, _assertThisInitialized2.default)(_this));
    var value = props.value,
        defaultValue = props.defaultValue,
        minimumValue = props.minimumValue;
    var initialValue = Number(value || defaultValue || minimumValue);
    _this.state = {
      accessible: true,
      inputValue: initialValue,
      sliderValue: initialValue
    };
    return _this;
  }

  (0, _createClass2.default)(BottomSheetRangeCell, [{
    key: "onChangeValue",
    value: function onChangeValue(initialValue) {
      var _this$props = this.props,
          decimalNum = _this$props.decimalNum,
          onChange = _this$props.onChange;
      initialValue = (0, _utils.toFixed)(initialValue, decimalNum);
      this.setState({
        inputValue: initialValue
      });
      this.announceCurrentValue("".concat(initialValue));
      onChange(initialValue);
    }
  }, {
    key: "onCellPress",
    value: function onCellPress() {
      this.setState({
        accessible: false
      });

      if (this.sliderRef) {
        var reactTag = (0, _reactNative.findNodeHandle)(this.sliderRef);

        _reactNative.AccessibilityInfo.setAccessibilityFocus(reactTag);
      }
    }
  }, {
    key: "announceCurrentValue",
    value: function announceCurrentValue(value) {
      /* translators: %s: current cell value. */
      var announcement = (0, _i18n.sprintf)((0, _i18n.__)('Current value is %s'), value);

      _reactNative.AccessibilityInfo.announceForAccessibility(announcement);
    }
  }, {
    key: "onChange",
    value: function onChange(nextValue) {
      var _this$props2 = this.props,
          onChange = _this$props2.onChange,
          onComplete = _this$props2.onComplete;
      this.setState({
        sliderValue: nextValue
      });
      onChange(nextValue);

      if (onComplete) {
        onComplete(nextValue);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props3 = this.props,
          value = _this$props3.value,
          defaultValue = _this$props3.defaultValue,
          _this$props3$minimumV = _this$props3.minimumValue,
          minimumValue = _this$props3$minimumV === void 0 ? 0 : _this$props3$minimumV,
          _this$props3$maximumV = _this$props3.maximumValue,
          maximumValue = _this$props3$maximumV === void 0 ? 10 : _this$props3$maximumV,
          disabled = _this$props3.disabled,
          _this$props3$step = _this$props3.step,
          step = _this$props3$step === void 0 ? 1 : _this$props3$step,
          preferredColorScheme = _this$props3.preferredColorScheme,
          _this$props3$minimumT = _this$props3.minimumTrackTintColor,
          minimumTrackTintColor = _this$props3$minimumT === void 0 ? preferredColorScheme === 'light' ? '#00669b' : '#5198d9' : _this$props3$minimumT,
          _this$props3$maximumT = _this$props3.maximumTrackTintColor,
          maximumTrackTintColor = _this$props3$maximumT === void 0 ? isIOS ? '#e9eff3' : '#909090' : _this$props3$maximumT,
          _this$props3$thumbTin = _this$props3.thumbTintColor,
          thumbTintColor = _this$props3$thumbTin === void 0 ? !isIOS && '#00669b' : _this$props3$thumbTin,
          preview = _this$props3.preview,
          cellContainerStyle = _this$props3.cellContainerStyle,
          onComplete = _this$props3.onComplete,
          _this$props3$shouldDi = _this$props3.shouldDisplayTextInput,
          shouldDisplayTextInput = _this$props3$shouldDi === void 0 ? true : _this$props3$shouldDi,
          children = _this$props3.children,
          decimalNum = _this$props3.decimalNum,
          cellProps = (0, _objectWithoutProperties2.default)(_this$props3, ["value", "defaultValue", "minimumValue", "maximumValue", "disabled", "step", "preferredColorScheme", "minimumTrackTintColor", "maximumTrackTintColor", "thumbTintColor", "preview", "cellContainerStyle", "onComplete", "shouldDisplayTextInput", "children", "decimalNum"]);
      var _this$state = this.state,
          accessible = _this$state.accessible,
          inputValue = _this$state.inputValue,
          sliderValue = _this$state.sliderValue;
      var accessibilityLabel = (0, _i18n.sprintf)(
      /* translators: accessibility text. Inform about current value. %1$s: Control label %2$s: Current value. */
      (0, _i18n._x)('%1$s. Current value is %2$s', 'Slider for picking a number inside a range'), cellProps.label, value);
      var containerStyle = [_rangeCell.default.container, isIOS ? _rangeCell.default.containerIOS : _rangeCell.default.containerAndroid];
      return (0, _element.createElement)(_cell.default, (0, _extends2.default)({}, cellProps, {
        cellContainerStyle: [_rangeCell.default.cellContainerStyles, cellContainerStyle],
        cellRowContainerStyle: containerStyle,
        accessibilityRole: 'none',
        value: '',
        editable: false,
        activeOpacity: 1,
        accessible: accessible,
        onPress: this.onCellPress,
        valueStyle: _rangeCell.default.valueStyle,
        accessibilityLabel: accessibilityLabel,
        accessibilityHint:
        /* translators: accessibility text (hint for focusing a slider) */
        (0, _i18n.__)('Double tap to change the value using slider')
      }), (0, _element.createElement)(_reactNative.View, {
        style: containerStyle
      }, preview, (0, _element.createElement)(_slider.default, {
        value: sliderValue,
        defaultValue: defaultValue,
        disabled: disabled,
        step: step,
        minimumValue: minimumValue,
        maximumValue: maximumValue,
        minimumTrackTintColor: minimumTrackTintColor,
        maximumTrackTintColor: maximumTrackTintColor,
        thumbTintColor: thumbTintColor,
        onValueChange: this.onChangeValue,
        onSlidingComplete: onComplete,
        ref: function ref(slider) {
          _this2.sliderRef = slider;
        },
        style: isIOS ? _rangeCell.default.sliderIOS : _rangeCell.default.sliderAndroid,
        accessibilityRole: 'adjustable'
      }), shouldDisplayTextInput && (0, _element.createElement)(_rangeTextInput.default, {
        label: cellProps.label,
        onChange: this.onChange,
        defaultValue: "".concat(inputValue),
        value: inputValue,
        min: minimumValue,
        max: maximumValue,
        step: step,
        decimalNum: decimalNum
      }, children)));
    }
  }]);
  return BottomSheetRangeCell;
}(_element.Component);

var _default = (0, _compose.withPreferredColorScheme)(BottomSheetRangeCell);

exports.default = _default;
//# sourceMappingURL=range-cell.native.js.map