/**
 * External dependencies
 */
import type * as React from 'react';
import type { As, RenderProp, ExtractHTMLAttributes } from 'reakit-utils/types';
import type { Interpolation } from 'create-emotion';
/**
 * Based on https://github.com/reakit/reakit/blob/master/packages/reakit-utils/src/types.ts
 */
export declare type ViewOwnProps<P, T extends As> = P & Omit<React.ComponentPropsWithRef<T>, 'as' | keyof P> & {
    as?: T | keyof JSX.IntrinsicElements;
    children?: React.ReactNode | RenderProp<ExtractHTMLAttributes<any>>;
};
export declare type ElementTypeFromViewOwnProps<P> = P extends ViewOwnProps<unknown, infer T> ? T : never;
export declare type PropsFromViewOwnProps<P> = P extends ViewOwnProps<infer PP, any> ? PP : never;
export declare type PolymorphicComponent<T extends As, O> = {
    <TT extends As>(props: ViewOwnProps<O, TT> & {
        as: TT;
    }): JSX.Element | null;
    (props: ViewOwnProps<O, T>): JSX.Element | null;
    displayName?: string;
    selector: string;
};
export declare type CreatePolymorphicComponent<T extends As, P> = (template: TemplateStringsArray, ...styles: (Interpolation<undefined> | PolymorphicComponent<any, any>)[]) => PolymorphicComponent<T, P>;
export declare type ForwardedRef<TElement extends HTMLElement> = ((instance: TElement | null) => void) | React.MutableRefObject<TElement | null> | null;
export declare type CoreElements = {
    [P in keyof JSX.IntrinsicElements]: PolymorphicComponent<P, {}>;
};
declare type CreateStyledComponents = {
    [P in keyof JSX.IntrinsicElements]: CreatePolymorphicComponent<P, {}>;
};
export declare type CreateStyled = CreateStyledComponents & {
    <T extends As>(component: T): CreatePolymorphicComponent<T, {}>;
};
export {};
//# sourceMappingURL=polymorphic-component.d.ts.map