"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.useBaseDragHandlers = useBaseDragHandlers;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _utils = require("@wp-g2/utils");

var _lodash = require("lodash");

var _react = require("react");

var _reactUseGesture = require("react-use-gesture");

var styles = _interopRequireWildcard(require("./TextInput.styles"));

function useBaseDragHandlers(_ref) {
  var decrement = _ref.decrement,
      dragAxis = _ref.dragAxis,
      increment = _ref.increment,
      _ref$isTypeNumeric = _ref.isTypeNumeric,
      isTypeNumeric = _ref$isTypeNumeric === void 0 ? true : _ref$isTypeNumeric;

  var _useState = (0, _react.useState)(
  /** @type {undefined | 'x' | 'y'} */
  undefined),
      _useState2 = (0, _slicedToArray2.default)(_useState, 2),
      dragState = _useState2[0],
      setDragState = _useState2[1];
  /** @type {import('react').MutableRefObject<number | undefined>} */


  var dragRef = (0, _react.useRef)();
  var threshold = 10;
  (0, _react.useEffect)(function () {
    if (dragState) {
      (0, _utils.clearSelection)();

      if (dragState === 'x') {
        document.documentElement.classList.add(styles.globalDraggableX);
        document.documentElement.classList.remove(styles.globalDraggableY);
      } else {
        document.documentElement.classList.remove(styles.globalDraggableX);
        document.documentElement.classList.add(styles.globalDraggableY);
      }
    } else {
      document.documentElement.classList.remove(styles.globalDraggableX);
      document.documentElement.classList.remove(styles.globalDraggableY);
    }
  }, [dragState]);
  (0, _react.useEffect)(function () {
    return function () {
      if (!dragRef.current) return;
      cancelAnimationFrame(dragRef.current);
    };
  }, []);
  var dragGestures = (0, _reactUseGesture.useDrag)(function (state) {
    var _state$delta = (0, _slicedToArray2.default)(state.delta, 2),
        x = _state$delta[0],
        y = _state$delta[1];

    setDragState(state.dragging ? state.axis : undefined);
    var isMovementY = state.axis === 'y';
    var movement = isMovementY ? y * -1 : x;
    if (Math.abs(movement) === 0) return;
    var shouldIncrement = movement > 0;
    var boost = movement === threshold ? 0 : movement;
    boost = shouldIncrement ? boost : boost * -1;
    boost = boost - 1;

    if (dragRef.current) {
      cancelAnimationFrame(dragRef.current);
    }

    dragRef.current = requestAnimationFrame(function () {
      if (shouldIncrement) {
        increment(boost);
      } else {
        decrement(boost);
      }
    });
  }, {
    axis: dragAxis,
    threshold: threshold
  });
  var gestures = isTypeNumeric ? dragGestures() : {
    onMouseDown: _lodash.noop,
    onTouchStart: _lodash.noop
  };
  var gestureRef = (0, _react.useRef)(gestures);
  return gestureRef.current;
}