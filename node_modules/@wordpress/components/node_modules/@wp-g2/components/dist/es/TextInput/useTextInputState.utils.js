import _slicedToArray from "@babel/runtime/helpers/esm/slicedToArray";
import { clearSelection } from '@wp-g2/utils';
import { noop } from 'lodash';
import { useEffect, useRef, useState } from 'react';
import { useDrag } from 'react-use-gesture';
import * as styles from './TextInput.styles';
export function useBaseDragHandlers(_ref) {
  var decrement = _ref.decrement,
      dragAxis = _ref.dragAxis,
      increment = _ref.increment,
      _ref$isTypeNumeric = _ref.isTypeNumeric,
      isTypeNumeric = _ref$isTypeNumeric === void 0 ? true : _ref$isTypeNumeric;

  var _useState = useState(
  /** @type {undefined | 'x' | 'y'} */
  undefined),
      _useState2 = _slicedToArray(_useState, 2),
      dragState = _useState2[0],
      setDragState = _useState2[1];
  /** @type {import('react').MutableRefObject<number | undefined>} */


  var dragRef = useRef();
  var threshold = 10;
  useEffect(function () {
    if (dragState) {
      clearSelection();

      if (dragState === 'x') {
        document.documentElement.classList.add(styles.globalDraggableX);
        document.documentElement.classList.remove(styles.globalDraggableY);
      } else {
        document.documentElement.classList.remove(styles.globalDraggableX);
        document.documentElement.classList.add(styles.globalDraggableY);
      }
    } else {
      document.documentElement.classList.remove(styles.globalDraggableX);
      document.documentElement.classList.remove(styles.globalDraggableY);
    }
  }, [dragState]);
  useEffect(function () {
    return function () {
      if (!dragRef.current) return;
      cancelAnimationFrame(dragRef.current);
    };
  }, []);
  var dragGestures = useDrag(function (state) {
    var _state$delta = _slicedToArray(state.delta, 2),
        x = _state$delta[0],
        y = _state$delta[1];

    setDragState(state.dragging ? state.axis : undefined);
    var isMovementY = state.axis === 'y';
    var movement = isMovementY ? y * -1 : x;
    if (Math.abs(movement) === 0) return;
    var shouldIncrement = movement > 0;
    var boost = movement === threshold ? 0 : movement;
    boost = shouldIncrement ? boost : boost * -1;
    boost = boost - 1;

    if (dragRef.current) {
      cancelAnimationFrame(dragRef.current);
    }

    dragRef.current = requestAnimationFrame(function () {
      if (shouldIncrement) {
        increment(boost);
      } else {
        decrement(boost);
      }
    });
  }, {
    axis: dragAxis,
    threshold: threshold
  });
  var gestures = isTypeNumeric ? dragGestures() : {
    onMouseDown: noop,
    onTouchStart: noop
  };
  var gestureRef = useRef(gestures);
  return gestureRef.current;
}