export namespace is {
    export const blob: (o: any) => o is Blob;
    export { defined };
    export const file: (o: any) => o is File;
    export { numeric };
    export { numericZero };
    export { valueEmpty };
    export const objectInterpolation: (o: string | number | boolean | import("@emotion/utils").SerializedStyles | import("create-emotion").ComponentSelector | import("@emotion/serialize").Keyframes | TemplateStringsArray | import("create-emotion").ArrayInterpolation<undefined> | import("create-emotion").ObjectInterpolation<undefined> | null | undefined) => o is import("create-emotion").ObjectInterpolation<any>;
    export { isArray as array };
    export { isBoolean as boolean };
    export { isDate as date };
    export { isEmpty as empty };
    export { isFunction as function };
    export { isMap as map };
    export { isNaN as nan };
    export { isNil as nil };
    export { isNumber as number };
    export { isNull as null };
    export { isObject as object };
    export { isObjectLike as objectLike };
    export { isPlainObject as plainObject };
    export { isRegExp as regExp };
    export { isSet as set };
    export { isString as string };
    export { isSymbol as symbol };
    export { isUndefined as undefined };
    export { isWeakSet as weakSet };
    export { isWeakMap as weakMap };
}
export default is;
/**
 * Checks to see if a value is not undefined and not null.
 *
 * @template T
 * @param {T} o
 *
 * @return {o is Exclude<T, undefined | null>} Whether value is defined.
 */
declare function defined<T>(o: T): o is Exclude<T, null | undefined>;
/**
 * Checks to see if a value is a numeric value (`number` or `string`).
 *
 * @param {any} o
 *
 * @return {boolean} Whether value is numeric.
 */
declare function numeric(o: any): boolean;
/**
 * Checks to see if a value is either `0` or `'0'`.
 *
 * @param {any} o
 *
 * @return {boolean} Whether value is a numeric `0`.
 */
declare function numericZero(o: any): boolean;
/**
 * Checks if a value is empty, null, or undefined.
 *
 * @param {any} value The value to check.
 *
 * @return {boolean} Whether value is empty.
 */
declare function valueEmpty(value: any): boolean;
declare const isArray: {
    (value?: any): value is any[];
    <T>(value?: any): value is any[];
};
declare const isBoolean: (value?: any) => value is boolean;
declare const isDate: (value?: any) => value is Date;
declare const isEmpty: (value?: any) => boolean;
declare const isFunction: (value: any) => value is (...args: any[]) => any;
declare const isMap: (value?: any) => value is Map<any, any>;
declare const isNaN: (value?: any) => boolean;
declare const isNil: (value: any) => value is null | undefined;
declare const isNumber: (value?: any) => value is number;
declare const isNull: (value: any) => value is null;
declare const isObject: (value?: any) => value is object;
declare const isObjectLike: (value?: any) => boolean;
declare const isPlainObject: (value?: any) => boolean;
declare const isRegExp: (value?: any) => value is RegExp;
declare const isSet: (value?: any) => value is Set<any>;
declare const isString: (value?: any) => value is string;
declare const isSymbol: (value: any) => value is symbol;
declare const isUndefined: (value: any) => value is undefined;
declare const isWeakSet: (value?: any) => value is WeakSet<object>;
declare const isWeakMap: (value?: any) => value is WeakMap<object, any>;
//# sourceMappingURL=is.d.ts.map