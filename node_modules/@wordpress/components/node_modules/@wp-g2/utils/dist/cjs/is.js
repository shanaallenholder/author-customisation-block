"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.is = void 0;

var _ = _interopRequireWildcard(require("lodash"));

var isArray = _.isArray,
    isBoolean = _.isBoolean,
    isDate = _.isDate,
    isEmpty = _.isEmpty,
    isFunction = _.isFunction,
    isMap = _.isMap,
    isNaN = _.isNaN,
    isNil = _.isNil,
    isNull = _.isNull,
    isNumber = _.isNumber,
    isObject = _.isObject,
    isObjectLike = _.isObjectLike,
    isPlainObject = _.isPlainObject,
    isRegExp = _.isRegExp,
    isSet = _.isSet,
    isString = _.isString,
    isSymbol = _.isSymbol,
    isUndefined = _.isUndefined,
    isWeakMap = _.isWeakMap,
    isWeakSet = _.isWeakSet;
/**
 * Checks to see if a value is a numeric value (`number` or `string`).
 *
 * @param {any} o
 *
 * @return {boolean} Whether value is numeric.
 */

var numeric = function (o) {
  var obj = typeof o === 'string' ? o.replace(/,/g, '') : o;
  return !isNaN(parseFloat(obj)) && !isNaN(Number(obj)) && isFinite(obj) && Object.prototype.toString.call(obj).toLowerCase() !== '[object array]';
};
/**
 * Checks to see if a value is either `0` or `'0'`.
 *
 * @param {any} o
 *
 * @return {boolean} Whether value is a numeric `0`.
 */


var numericZero = function (o) {
  return o === 0 || o === '0';
};
/**
 * Checks to see if a value is not undefined and not null.
 *
 * @template T
 * @param {T} o
 *
 * @return {o is Exclude<T, undefined | null>} Whether value is defined.
 */


var defined = function (o) {
  return !isNil(o);
};
/**
 * Checks if a value is empty, null, or undefined.
 *
 * @param {any} value The value to check.
 *
 * @return {boolean} Whether value is empty.
 */


function valueEmpty(value) {
  return !is.defined(value) || value === '';
}
/**
 * A collection of type checks.
 */


var is = {
  /** @type {(o: any) => o is Blob} */
  blob: function blob(o) {
    return o instanceof Blob;
  },
  defined: defined,

  /** @type {(o: any) => o is File} */
  file: function file(o) {
    return o instanceof File;
  },
  numeric: numeric,
  numericZero: numericZero,
  valueEmpty: valueEmpty,
  // This is safe because we only accept Interpolation rather than any
  // _.isPlainObject(TemplateStringsArray) -> false
  // _.isPlainObject is also `false` for the rest of the values that `Interpolation` covers except for `ObjectInterpolation` :)

  /** @type {(o: TemplateStringsArray | import('create-emotion').Interpolation) => o is import('create-emotion').ObjectInterpolation} */
  objectInterpolation: function objectInterpolation(o) {
    return isPlainObject(o);
  },

  /**
   * Re-exports from lodash
   */
  array: isArray,
  boolean: isBoolean,
  date: isDate,
  empty: isEmpty,
  function: isFunction,
  map: isMap,
  nan: isNaN,
  nil: isNil,
  number: isNumber,
  null: isNull,
  object: isObject,
  objectLike: isObjectLike,
  plainObject: isPlainObject,
  regExp: isRegExp,
  set: isSet,
  string: isString,
  symbol: isSymbol,
  undefined: isUndefined,
  weakSet: isWeakSet,
  weakMap: isWeakMap
};
exports.is = is;
var _default = is;
exports.default = _default;