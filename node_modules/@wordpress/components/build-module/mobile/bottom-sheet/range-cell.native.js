import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import _classCallCheck from "@babel/runtime/helpers/esm/classCallCheck";
import _createClass from "@babel/runtime/helpers/esm/createClass";
import _assertThisInitialized from "@babel/runtime/helpers/esm/assertThisInitialized";
import _inherits from "@babel/runtime/helpers/esm/inherits";
import _possibleConstructorReturn from "@babel/runtime/helpers/esm/possibleConstructorReturn";
import _getPrototypeOf from "@babel/runtime/helpers/esm/getPrototypeOf";
import { createElement } from "@wordpress/element";

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

/**
 * External dependencies
 */
import { Platform, AccessibilityInfo, findNodeHandle, View } from 'react-native';
import Slider from '@react-native-community/slider';
/**
 * WordPress dependencies
 */

import { _x, __, sprintf } from '@wordpress/i18n';
import { Component } from '@wordpress/element';
import { withPreferredColorScheme } from '@wordpress/compose';
/**
 * Internal dependencies
 */

import Cell from './cell';
import styles from './range-cell.scss';
import RangeTextInput from './range-text-input';
import { toFixed } from '../utils';
var isIOS = Platform.OS === 'ios';

var BottomSheetRangeCell = /*#__PURE__*/function (_Component) {
  _inherits(BottomSheetRangeCell, _Component);

  var _super = _createSuper(BottomSheetRangeCell);

  function BottomSheetRangeCell(props) {
    var _this;

    _classCallCheck(this, BottomSheetRangeCell);

    _this = _super.call(this, props);
    _this.onChangeValue = _this.onChangeValue.bind(_assertThisInitialized(_this));
    _this.onChange = _this.onChange.bind(_assertThisInitialized(_this));
    _this.onCellPress = _this.onCellPress.bind(_assertThisInitialized(_this));
    var value = props.value,
        defaultValue = props.defaultValue,
        minimumValue = props.minimumValue;
    var initialValue = Number(value || defaultValue || minimumValue);
    _this.state = {
      accessible: true,
      inputValue: initialValue,
      sliderValue: initialValue
    };
    return _this;
  }

  _createClass(BottomSheetRangeCell, [{
    key: "onChangeValue",
    value: function onChangeValue(initialValue) {
      var _this$props = this.props,
          decimalNum = _this$props.decimalNum,
          onChange = _this$props.onChange;
      initialValue = toFixed(initialValue, decimalNum);
      this.setState({
        inputValue: initialValue
      });
      this.announceCurrentValue("".concat(initialValue));
      onChange(initialValue);
    }
  }, {
    key: "onCellPress",
    value: function onCellPress() {
      this.setState({
        accessible: false
      });

      if (this.sliderRef) {
        var reactTag = findNodeHandle(this.sliderRef);
        AccessibilityInfo.setAccessibilityFocus(reactTag);
      }
    }
  }, {
    key: "announceCurrentValue",
    value: function announceCurrentValue(value) {
      /* translators: %s: current cell value. */
      var announcement = sprintf(__('Current value is %s'), value);
      AccessibilityInfo.announceForAccessibility(announcement);
    }
  }, {
    key: "onChange",
    value: function onChange(nextValue) {
      var _this$props2 = this.props,
          onChange = _this$props2.onChange,
          onComplete = _this$props2.onComplete;
      this.setState({
        sliderValue: nextValue
      });
      onChange(nextValue);

      if (onComplete) {
        onComplete(nextValue);
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props3 = this.props,
          value = _this$props3.value,
          defaultValue = _this$props3.defaultValue,
          _this$props3$minimumV = _this$props3.minimumValue,
          minimumValue = _this$props3$minimumV === void 0 ? 0 : _this$props3$minimumV,
          _this$props3$maximumV = _this$props3.maximumValue,
          maximumValue = _this$props3$maximumV === void 0 ? 10 : _this$props3$maximumV,
          disabled = _this$props3.disabled,
          _this$props3$step = _this$props3.step,
          step = _this$props3$step === void 0 ? 1 : _this$props3$step,
          preferredColorScheme = _this$props3.preferredColorScheme,
          _this$props3$minimumT = _this$props3.minimumTrackTintColor,
          minimumTrackTintColor = _this$props3$minimumT === void 0 ? preferredColorScheme === 'light' ? '#00669b' : '#5198d9' : _this$props3$minimumT,
          _this$props3$maximumT = _this$props3.maximumTrackTintColor,
          maximumTrackTintColor = _this$props3$maximumT === void 0 ? isIOS ? '#e9eff3' : '#909090' : _this$props3$maximumT,
          _this$props3$thumbTin = _this$props3.thumbTintColor,
          thumbTintColor = _this$props3$thumbTin === void 0 ? !isIOS && '#00669b' : _this$props3$thumbTin,
          preview = _this$props3.preview,
          cellContainerStyle = _this$props3.cellContainerStyle,
          onComplete = _this$props3.onComplete,
          _this$props3$shouldDi = _this$props3.shouldDisplayTextInput,
          shouldDisplayTextInput = _this$props3$shouldDi === void 0 ? true : _this$props3$shouldDi,
          children = _this$props3.children,
          decimalNum = _this$props3.decimalNum,
          cellProps = _objectWithoutProperties(_this$props3, ["value", "defaultValue", "minimumValue", "maximumValue", "disabled", "step", "preferredColorScheme", "minimumTrackTintColor", "maximumTrackTintColor", "thumbTintColor", "preview", "cellContainerStyle", "onComplete", "shouldDisplayTextInput", "children", "decimalNum"]);

      var _this$state = this.state,
          accessible = _this$state.accessible,
          inputValue = _this$state.inputValue,
          sliderValue = _this$state.sliderValue;
      var accessibilityLabel = sprintf(
      /* translators: accessibility text. Inform about current value. %1$s: Control label %2$s: Current value. */
      _x('%1$s. Current value is %2$s', 'Slider for picking a number inside a range'), cellProps.label, value);
      var containerStyle = [styles.container, isIOS ? styles.containerIOS : styles.containerAndroid];
      return createElement(Cell, _extends({}, cellProps, {
        cellContainerStyle: [styles.cellContainerStyles, cellContainerStyle],
        cellRowContainerStyle: containerStyle,
        accessibilityRole: 'none',
        value: '',
        editable: false,
        activeOpacity: 1,
        accessible: accessible,
        onPress: this.onCellPress,
        valueStyle: styles.valueStyle,
        accessibilityLabel: accessibilityLabel,
        accessibilityHint:
        /* translators: accessibility text (hint for focusing a slider) */
        __('Double tap to change the value using slider')
      }), createElement(View, {
        style: containerStyle
      }, preview, createElement(Slider, {
        value: sliderValue,
        defaultValue: defaultValue,
        disabled: disabled,
        step: step,
        minimumValue: minimumValue,
        maximumValue: maximumValue,
        minimumTrackTintColor: minimumTrackTintColor,
        maximumTrackTintColor: maximumTrackTintColor,
        thumbTintColor: thumbTintColor,
        onValueChange: this.onChangeValue,
        onSlidingComplete: onComplete,
        ref: function ref(slider) {
          _this2.sliderRef = slider;
        },
        style: isIOS ? styles.sliderIOS : styles.sliderAndroid,
        accessibilityRole: 'adjustable'
      }), shouldDisplayTextInput && createElement(RangeTextInput, {
        label: cellProps.label,
        onChange: this.onChange,
        defaultValue: "".concat(inputValue),
        value: inputValue,
        min: minimumValue,
        max: maximumValue,
        step: step,
        decimalNum: decimalNum
      }, children)));
    }
  }]);

  return BottomSheetRangeCell;
}(Component);

export default withPreferredColorScheme(BottomSheetRangeCell);
//# sourceMappingURL=range-cell.native.js.map