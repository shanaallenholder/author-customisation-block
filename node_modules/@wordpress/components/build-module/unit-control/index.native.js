import _extends from "@babel/runtime/helpers/esm/extends";
import _objectWithoutProperties from "@babel/runtime/helpers/esm/objectWithoutProperties";
import { createElement, Fragment } from "@wordpress/element";

/**
 * External dependencies
 */
import { Text, View, TouchableWithoutFeedback, Platform, findNodeHandle } from 'react-native';
/**
 * Internal dependencies
 */

import RangeCell from '../mobile/bottom-sheet/range-cell';
import StepperCell from '../mobile/bottom-sheet/stepper-cell';
import Picker from '../mobile/picker';
import styles from './style.scss';
import { CSS_UNITS } from './utils';
/**
 * WordPress dependencies
 */

import { useRef } from '@wordpress/element';
import { withPreferredColorScheme } from '@wordpress/compose';
import { __, sprintf } from '@wordpress/i18n';

function UnitControl(_ref) {
  var currentInput = _ref.currentInput,
      label = _ref.label,
      value = _ref.value,
      onChange = _ref.onChange,
      onUnitChange = _ref.onUnitChange,
      initialPosition = _ref.initialPosition,
      min = _ref.min,
      max = _ref.max,
      separatorType = _ref.separatorType,
      _ref$units = _ref.units,
      units = _ref$units === void 0 ? CSS_UNITS : _ref$units,
      unit = _ref.unit,
      getStylesFromColorScheme = _ref.getStylesFromColorScheme,
      decimalNum = _ref.decimalNum,
      props = _objectWithoutProperties(_ref, ["currentInput", "label", "value", "onChange", "onUnitChange", "initialPosition", "min", "max", "separatorType", "units", "unit", "getStylesFromColorScheme", "decimalNum"]);

  var pickerRef = useRef();
  var anchorNodeRef = useRef();

  function onPickerPresent() {
    if (pickerRef !== null && pickerRef !== void 0 && pickerRef.current) {
      pickerRef.current.presentPicker();
    }
  }

  var currentInputValue = currentInput === null ? value : currentInput;
  var initialControlValue = isFinite(currentInputValue) ? currentInputValue : initialPosition;
  var unitButtonTextStyle = getStylesFromColorScheme(styles.unitButtonText, styles.unitButtonTextDark);

  var renderUnitButton = function renderUnitButton() {
    var accessibilityHint = Platform.OS === 'ios' ? __('Double tap to open Action Sheet with available options') : __('Double tap to open Bottom Sheet with available options');
    /* translators: accessibility text. Inform about current unit value. %s: Current unit value. */

    var accessibilityLabel = sprintf(__('Current unit is %s'), unit);
    return createElement(TouchableWithoutFeedback, {
      onPress: onPickerPresent,
      accessibilityLabel: accessibilityLabel,
      accessibilityRole: "button",
      accessibilityHint: accessibilityHint
    }, createElement(View, {
      style: styles.unitButton
    }, createElement(Text, {
      style: unitButtonTextStyle
    }, unit)));
  };

  var getAnchor = function getAnchor() {
    return anchorNodeRef !== null && anchorNodeRef !== void 0 && anchorNodeRef.current ? findNodeHandle(anchorNodeRef === null || anchorNodeRef === void 0 ? void 0 : anchorNodeRef.current) : undefined;
  };

  var renderUnitPicker = function renderUnitPicker() {
    return createElement(View, {
      style: styles.unitMenu,
      ref: anchorNodeRef
    }, renderUnitButton(), createElement(Picker, {
      ref: pickerRef,
      options: units,
      onChange: onUnitChange,
      hideCancelButton: true,
      leftAlign: true,
      getAnchor: getAnchor
    }));
  };

  return createElement(Fragment, null, unit !== '%' ? createElement(StepperCell, _extends({
    label: label,
    max: max,
    min: min,
    onChange: onChange,
    separatorType: separatorType,
    value: value,
    defaultValue: initialControlValue,
    shouldDisplayTextInput: true,
    decimalNum: unit === 'px' ? 0 : decimalNum
  }, props), renderUnitPicker()) : createElement(RangeCell, _extends({
    label: label,
    onChange: onChange,
    minimumValue: min,
    maximumValue: max,
    value: value,
    defaultValue: initialControlValue,
    separatorType: separatorType,
    decimalNum: decimalNum
  }, props), renderUnitPicker()));
}

export default withPreferredColorScheme(UnitControl);
//# sourceMappingURL=index.native.js.map