import { Resizable } from 're-resizable';
import type { ResizableProps } from 're-resizable';
import type { ReactNode } from 'react';
export declare const ResizableBox: import("react").ForwardRefExoticComponent<ResizableProps & {
    children: ReactNode;
    showHandle?: boolean | undefined;
    __experimentalShowTooltip?: boolean | undefined;
    __experimentalTooltipProps?: (Omit<{
        theme?: import("@emotion/react").Theme | undefined;
        as?: import("react").ElementType<any, keyof import("react").JSX.IntrinsicElements> | undefined;
    } & import("react").ClassAttributes<HTMLDivElement> & import("react").HTMLAttributes<HTMLDivElement> & {
        'aria-hidden'?: boolean | undefined;
        axis?: import("./resize-tooltip/utils").Axis | undefined;
        className?: string | undefined;
        fadeTimeout?: number | undefined;
        isVisible?: boolean | undefined;
        labelRef?: import("react").Ref<HTMLDivElement> | undefined;
        onResize?: ((data: {
            width: number | null;
            height: number | null;
        }) => void) | undefined;
        position?: import("./resize-tooltip/utils").Position | undefined;
        showPx?: boolean | undefined;
        zIndex?: number | undefined;
    }, "ref"> & import("react").RefAttributes<HTMLDivElement>) | undefined;
} & import("react").RefAttributes<Resizable>>;
export default ResizableBox;
//# sourceMappingURL=index.d.ts.map