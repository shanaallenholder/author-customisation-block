import { createElement, Fragment } from "react";
/**
 * WordPress dependencies
 */
import { useState } from '@wordpress/element';
import { useViewportMatch } from '@wordpress/compose';
import { Button, Spinner } from '@wordpress/components';
import { __ } from '@wordpress/i18n';
import { useSelect } from '@wordpress/data';

/**
 * Internal dependencies
 */
import PatternsExplorerModal from '../block-patterns-explorer';
import MobileTabNavigation from '../mobile-tab-navigation';
import { PatternCategoryPreviews } from './pattern-category-previews';
import { usePatternCategories } from './use-pattern-categories';
import CategoryTabs from '../category-tabs';
import InserterNoResults from '../no-results';
import { store as blockEditorStore } from '../../../store';
import { unlock } from '../../../lock-unlock';
function BlockPatternsTab({
  onSelectCategory,
  selectedCategory,
  onInsert,
  rootClientId,
  children
}) {
  const [showPatternsExplorer, setShowPatternsExplorer] = useState(false);
  const categories = usePatternCategories(rootClientId);
  const isMobile = useViewportMatch('medium', '<');
  const isResolvingPatterns = useSelect(select => unlock(select(blockEditorStore)).isResolvingPatterns(), []);
  if (isResolvingPatterns) {
    return createElement("div", {
      className: "block-editor-inserter__patterns-loading"
    }, createElement(Spinner, null));
  }
  if (!categories.length) {
    return createElement(InserterNoResults, null);
  }
  return createElement(Fragment, null, !isMobile && createElement("div", {
    className: "block-editor-inserter__block-patterns-tabs-container"
  }, createElement(CategoryTabs, {
    categories: categories,
    selectedCategory: selectedCategory,
    onSelectCategory: onSelectCategory
  }, children), createElement(Button, {
    className: "block-editor-inserter__patterns-explore-button",
    onClick: () => setShowPatternsExplorer(true),
    variant: "secondary"
  }, __('Explore all patterns'))), isMobile && createElement(MobileTabNavigation, {
    categories: categories
  }, category => createElement("div", {
    className: "block-editor-inserter__category-panel"
  }, createElement(PatternCategoryPreviews, {
    key: category.name,
    onInsert: onInsert,
    rootClientId: rootClientId,
    category: category,
    showTitlesAsTooltip: false
  }))), showPatternsExplorer && createElement(PatternsExplorerModal, {
    initialCategory: selectedCategory || categories[0],
    patternCategories: categories,
    onModalClose: () => setShowPatternsExplorer(false),
    rootClientId: rootClientId
  }));
}
export default BlockPatternsTab;
//# sourceMappingURL=index.js.map