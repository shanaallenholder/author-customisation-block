{"version":3,"names":["_data","require","_selectors","_utils","_utils2","_constants","_lockUnlock","_privateKeys","_getBlockSettings","isBlockInterfaceHidden","state","getLastInsertedBlocksClientIds","lastBlockInserted","clientIds","getBlockWithoutAttributes","clientId","blocks","byClientId","get","isBlockSubtreeDisabled","isChildSubtreeDisabled","childClientId","getBlockEditingMode","getBlockOrder","every","exports","getEnabledClientIdsTreeUnmemoized","rootClientId","blockOrder","result","innerBlocks","push","getEnabledClientIdsTree","createSelector","order","blockEditingModes","settings","templateLock","blockListSettings","getEnabledBlockParents","ascending","getBlockParents","filter","parent","parents","getRemovalPromptData","removalPromptData","getBlockRemovalRules","blockRemovalRules","getOpenedBlockSettingsMenu","openedBlockSettingsMenu","getStyleOverrides","getClientIdsWithDescendants","clientIdMap","reduce","acc","index","styleOverrides","sort","overrideA","overrideB","_clientIdMap$clientId","_clientIdMap$clientId2","clientIdA","clientIdB","aIndex","bIndex","getRegisteredInserterMediaCategories","registeredInserterMediaCategories","getInserterMediaCategories","inserterMediaCategories","allowedMimeTypes","enableOpenverseMediaCategory","length","coreInserterMediaCategoriesNames","map","name","mergedCategories","includes","category","Object","values","some","mimeType","startsWith","mediaType","hasAllowedPatterns","createRegistrySelector","select","getAllPatterns","__experimentalGetParsedPattern","unlock","STORE_NAME","patterns","allowedBlockTypes","getSettings","inserter","checkAllowListRecursive","blockName","canInsertBlockType","getAllPatternsDependants","getInsertBlockTypeDependants","mapUserPattern","userPattern","__experimentalUserPatternCategories","id","type","INSERTER_PATTERN_TYPES","user","title","raw","categories","wp_pattern_category","catId","find","slug","content","syncStatus","wp_pattern_sync_status","getPatternBySlug","patternName","_state$settings$__exp","_state$settings$selec","_id","parseInt","slice","block","getReusableBlocks","__experimentalBlockPatterns","selectBlockPatternsKey","__experimentalReusableBlocks","_state$settings$__exp2","_state$settings$selec2","x","arr","findIndex","y","isResolvingPatterns","blockPatternsSelect","reusableBlocksSelect","reusableBlocksSelectKey","undefined","EMPTY_ARRAY","_state$settings$__exp3","getLastFocus","lastFocus","isDragging","getExpandedBlock","expandedBlock","getContentLockingParent","current","getBlockName","getTemplateLock","getTemporarilyEditingAsBlocks","temporarilyEditingAsBlocks","getTemporarilyEditingFocusModeToRevert","temporarilyEditingFocusModeRevert"],"sources":["@wordpress/block-editor/src/store/private-selectors.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { createSelector, createRegistrySelector } from '@wordpress/data';\n\n/**\n * Internal dependencies\n */\nimport {\n\tgetBlockOrder,\n\tgetBlockParents,\n\tgetBlockEditingMode,\n\tgetSettings,\n\tcanInsertBlockType,\n\tgetBlockName,\n\tgetTemplateLock,\n\tgetClientIdsWithDescendants,\n} from './selectors';\nimport {\n\tcheckAllowListRecursive,\n\tgetAllPatternsDependants,\n\tgetInsertBlockTypeDependants,\n} from './utils';\nimport { INSERTER_PATTERN_TYPES } from '../components/inserter/block-patterns-tab/utils';\nimport { STORE_NAME } from './constants';\nimport { unlock } from '../lock-unlock';\nimport {\n\tselectBlockPatternsKey,\n\treusableBlocksSelectKey,\n} from './private-keys';\n\nexport { getBlockSettings } from './get-block-settings';\n\n/**\n * Returns true if the block interface is hidden, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether the block toolbar is hidden.\n */\nexport function isBlockInterfaceHidden( state ) {\n\treturn state.isBlockInterfaceHidden;\n}\n\n/**\n * Gets the client ids of the last inserted blocks.\n *\n * @param {Object} state Global application state.\n * @return {Array|undefined} Client Ids of the last inserted block(s).\n */\nexport function getLastInsertedBlocksClientIds( state ) {\n\treturn state?.lastBlockInserted?.clientIds;\n}\n\nexport function getBlockWithoutAttributes( state, clientId ) {\n\treturn state.blocks.byClientId.get( clientId );\n}\n\n/**\n * Returns true if all of the descendants of a block with the given client ID\n * have an editing mode of 'disabled', or false otherwise.\n *\n * @param {Object} state    Global application state.\n * @param {string} clientId The block client ID.\n *\n * @return {boolean} Whether the block descendants are disabled.\n */\nexport const isBlockSubtreeDisabled = ( state, clientId ) => {\n\tconst isChildSubtreeDisabled = ( childClientId ) => {\n\t\treturn (\n\t\t\tgetBlockEditingMode( state, childClientId ) === 'disabled' &&\n\t\t\tgetBlockOrder( state, childClientId ).every(\n\t\t\t\tisChildSubtreeDisabled\n\t\t\t)\n\t\t);\n\t};\n\treturn getBlockOrder( state, clientId ).every( isChildSubtreeDisabled );\n};\n\nfunction getEnabledClientIdsTreeUnmemoized( state, rootClientId ) {\n\tconst blockOrder = getBlockOrder( state, rootClientId );\n\tconst result = [];\n\n\tfor ( const clientId of blockOrder ) {\n\t\tconst innerBlocks = getEnabledClientIdsTreeUnmemoized(\n\t\t\tstate,\n\t\t\tclientId\n\t\t);\n\t\tif ( getBlockEditingMode( state, clientId ) !== 'disabled' ) {\n\t\t\tresult.push( { clientId, innerBlocks } );\n\t\t} else {\n\t\t\tresult.push( ...innerBlocks );\n\t\t}\n\t}\n\n\treturn result;\n}\n\n/**\n * Returns a tree of block objects with only clientID and innerBlocks set.\n * Blocks with a 'disabled' editing mode are not included.\n *\n * @param {Object}  state        Global application state.\n * @param {?string} rootClientId Optional root client ID of block list.\n *\n * @return {Object[]} Tree of block objects with only clientID and innerBlocks set.\n */\nexport const getEnabledClientIdsTree = createSelector(\n\tgetEnabledClientIdsTreeUnmemoized,\n\t( state ) => [\n\t\tstate.blocks.order,\n\t\tstate.blockEditingModes,\n\t\tstate.settings.templateLock,\n\t\tstate.blockListSettings,\n\t]\n);\n\n/**\n * Returns a list of a given block's ancestors, from top to bottom. Blocks with\n * a 'disabled' editing mode are excluded.\n *\n * @see getBlockParents\n *\n * @param {Object}  state     Global application state.\n * @param {string}  clientId  The block client ID.\n * @param {boolean} ascending Order results from bottom to top (true) or top\n *                            to bottom (false).\n */\nexport const getEnabledBlockParents = createSelector(\n\t( state, clientId, ascending = false ) => {\n\t\treturn getBlockParents( state, clientId, ascending ).filter(\n\t\t\t( parent ) => getBlockEditingMode( state, parent ) !== 'disabled'\n\t\t);\n\t},\n\t( state ) => [\n\t\tstate.blocks.parents,\n\t\tstate.blockEditingModes,\n\t\tstate.settings.templateLock,\n\t\tstate.blockListSettings,\n\t]\n);\n\n/**\n * Selector that returns the data needed to display a prompt when certain\n * blocks are removed, or `false` if no such prompt is requested.\n *\n * @param {Object} state Global application state.\n *\n * @return {Object|false} Data for removal prompt display, if any.\n */\nexport function getRemovalPromptData( state ) {\n\treturn state.removalPromptData;\n}\n\n/**\n * Returns true if removal prompt exists, or false otherwise.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether removal prompt exists.\n */\nexport function getBlockRemovalRules( state ) {\n\treturn state.blockRemovalRules;\n}\n\n/**\n * Returns the client ID of the block settings menu that is currently open.\n *\n * @param {Object} state Global application state.\n * @return {string|null} The client ID of the block menu that is currently open.\n */\nexport function getOpenedBlockSettingsMenu( state ) {\n\treturn state.openedBlockSettingsMenu;\n}\n\n/**\n * Returns all style overrides, intended to be merged with global editor styles.\n *\n * Overrides are sorted to match the order of the blocks they relate to. This\n * is useful to maintain correct CSS cascade order.\n *\n * @param {Object} state Global application state.\n *\n * @return {Array} An array of style ID to style override pairs.\n */\nexport const getStyleOverrides = createSelector(\n\t( state ) => {\n\t\tconst clientIds = getClientIdsWithDescendants( state );\n\t\tconst clientIdMap = clientIds.reduce( ( acc, clientId, index ) => {\n\t\t\tacc[ clientId ] = index;\n\t\t\treturn acc;\n\t\t}, {} );\n\n\t\treturn [ ...state.styleOverrides ].sort( ( overrideA, overrideB ) => {\n\t\t\t// Once the overrides Map is spread to an array, the first element\n\t\t\t// is the key, while the second is the override itself including\n\t\t\t// the clientId to sort by.\n\t\t\tconst [ , { clientId: clientIdA } ] = overrideA;\n\t\t\tconst [ , { clientId: clientIdB } ] = overrideB;\n\n\t\t\tconst aIndex = clientIdMap[ clientIdA ] ?? -1;\n\t\t\tconst bIndex = clientIdMap[ clientIdB ] ?? -1;\n\n\t\t\treturn aIndex - bIndex;\n\t\t} );\n\t},\n\t( state ) => [ state.blocks.order, state.styleOverrides ]\n);\n\n/** @typedef {import('./actions').InserterMediaCategory} InserterMediaCategory */\n/**\n * Returns the registered inserter media categories through the public API.\n *\n * @param {Object} state Editor state.\n *\n * @return {InserterMediaCategory[]} Inserter media categories.\n */\nexport function getRegisteredInserterMediaCategories( state ) {\n\treturn state.registeredInserterMediaCategories;\n}\n\n/**\n * Returns an array containing the allowed inserter media categories.\n * It merges the registered media categories from extenders with the\n * core ones. It also takes into account the allowed `mime_types`, which\n * can be altered by `upload_mimes` filter and restrict some of them.\n *\n * @param {Object} state Global application state.\n *\n * @return {InserterMediaCategory[]} Client IDs of descendants.\n */\nexport const getInserterMediaCategories = createSelector(\n\t( state ) => {\n\t\tconst {\n\t\t\tsettings: {\n\t\t\t\tinserterMediaCategories,\n\t\t\t\tallowedMimeTypes,\n\t\t\t\tenableOpenverseMediaCategory,\n\t\t\t},\n\t\t\tregisteredInserterMediaCategories,\n\t\t} = state;\n\t\t// The allowed `mime_types` can be altered by `upload_mimes` filter and restrict\n\t\t// some of them. In this case we shouldn't add the category to the available media\n\t\t// categories list in the inserter.\n\t\tif (\n\t\t\t( ! inserterMediaCategories &&\n\t\t\t\t! registeredInserterMediaCategories.length ) ||\n\t\t\t! allowedMimeTypes\n\t\t) {\n\t\t\treturn;\n\t\t}\n\t\tconst coreInserterMediaCategoriesNames =\n\t\t\tinserterMediaCategories?.map( ( { name } ) => name ) || [];\n\t\tconst mergedCategories = [\n\t\t\t...( inserterMediaCategories || [] ),\n\t\t\t...( registeredInserterMediaCategories || [] ).filter(\n\t\t\t\t( { name } ) =>\n\t\t\t\t\t! coreInserterMediaCategoriesNames.includes( name )\n\t\t\t),\n\t\t];\n\t\treturn mergedCategories.filter( ( category ) => {\n\t\t\t// Check if Openverse category is enabled.\n\t\t\tif (\n\t\t\t\t! enableOpenverseMediaCategory &&\n\t\t\t\tcategory.name === 'openverse'\n\t\t\t) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\treturn Object.values( allowedMimeTypes ).some( ( mimeType ) =>\n\t\t\t\tmimeType.startsWith( `${ category.mediaType }/` )\n\t\t\t);\n\t\t} );\n\t},\n\t( state ) => [\n\t\tstate.settings.inserterMediaCategories,\n\t\tstate.settings.allowedMimeTypes,\n\t\tstate.settings.enableOpenverseMediaCategory,\n\t\tstate.registeredInserterMediaCategories,\n\t]\n);\n\n/**\n * Returns whether there is at least one allowed pattern for inner blocks children.\n * This is useful for deferring the parsing of all patterns until needed.\n *\n * @param {Object} state               Editor state.\n * @param {string} [rootClientId=null] Target root client ID.\n *\n * @return {boolean} If there is at least one allowed pattern.\n */\nexport const hasAllowedPatterns = createRegistrySelector( ( select ) =>\n\tcreateSelector(\n\t\t( state, rootClientId = null ) => {\n\t\t\tconst { getAllPatterns, __experimentalGetParsedPattern } = unlock(\n\t\t\t\tselect( STORE_NAME )\n\t\t\t);\n\t\t\tconst patterns = getAllPatterns();\n\t\t\tconst { allowedBlockTypes } = getSettings( state );\n\t\t\treturn patterns.some( ( { name, inserter = true } ) => {\n\t\t\t\tif ( ! inserter ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tconst { blocks } = __experimentalGetParsedPattern( name );\n\t\t\t\treturn (\n\t\t\t\t\tcheckAllowListRecursive( blocks, allowedBlockTypes ) &&\n\t\t\t\t\tblocks.every( ( { name: blockName } ) =>\n\t\t\t\t\t\tcanInsertBlockType( state, blockName, rootClientId )\n\t\t\t\t\t)\n\t\t\t\t);\n\t\t\t} );\n\t\t},\n\t\t( state, rootClientId ) => [\n\t\t\t...getAllPatternsDependants( select )( state ),\n\t\t\t...getInsertBlockTypeDependants( state, rootClientId ),\n\t\t]\n\t)\n);\n\nfunction mapUserPattern(\n\tuserPattern,\n\t__experimentalUserPatternCategories = []\n) {\n\treturn {\n\t\tname: `core/block/${ userPattern.id }`,\n\t\tid: userPattern.id,\n\t\ttype: INSERTER_PATTERN_TYPES.user,\n\t\ttitle: userPattern.title.raw,\n\t\tcategories: userPattern.wp_pattern_category.map( ( catId ) => {\n\t\t\tconst category = __experimentalUserPatternCategories.find(\n\t\t\t\t( { id } ) => id === catId\n\t\t\t);\n\t\t\treturn category ? category.slug : catId;\n\t\t} ),\n\t\tcontent: userPattern.content.raw,\n\t\tsyncStatus: userPattern.wp_pattern_sync_status,\n\t};\n}\n\nexport const getPatternBySlug = createRegistrySelector( ( select ) =>\n\tcreateSelector(\n\t\t( state, patternName ) => {\n\t\t\t// Only fetch reusable blocks if we know we need them. To do: maybe\n\t\t\t// use the entity record API to retrieve the block by slug.\n\t\t\tif ( patternName?.startsWith( 'core/block/' ) ) {\n\t\t\t\tconst _id = parseInt(\n\t\t\t\t\tpatternName.slice( 'core/block/'.length ),\n\t\t\t\t\t10\n\t\t\t\t);\n\t\t\t\tconst block = unlock( select( STORE_NAME ) )\n\t\t\t\t\t.getReusableBlocks()\n\t\t\t\t\t.find( ( { id } ) => id === _id );\n\n\t\t\t\tif ( ! block ) {\n\t\t\t\t\treturn null;\n\t\t\t\t}\n\n\t\t\t\treturn mapUserPattern(\n\t\t\t\t\tblock,\n\t\t\t\t\tstate.settings.__experimentalUserPatternCategories\n\t\t\t\t);\n\t\t\t}\n\n\t\t\treturn [\n\t\t\t\t// This setting is left for back compat.\n\t\t\t\t...( state.settings.__experimentalBlockPatterns ?? [] ),\n\t\t\t\t...( state.settings[ selectBlockPatternsKey ]?.( select ) ??\n\t\t\t\t\t[] ),\n\t\t\t].find( ( { name } ) => name === patternName );\n\t\t},\n\t\t( state, patternName ) =>\n\t\t\tpatternName?.startsWith( 'core/block/' )\n\t\t\t\t? [\n\t\t\t\t\t\tunlock( select( STORE_NAME ) ).getReusableBlocks(),\n\t\t\t\t\t\tstate.settings.__experimentalReusableBlocks,\n\t\t\t\t  ]\n\t\t\t\t: [\n\t\t\t\t\t\tstate.settings.__experimentalBlockPatterns,\n\t\t\t\t\t\tstate.settings[ selectBlockPatternsKey ]?.( select ),\n\t\t\t\t  ]\n\t)\n);\n\nexport const getAllPatterns = createRegistrySelector( ( select ) =>\n\tcreateSelector( ( state ) => {\n\t\treturn [\n\t\t\t...unlock( select( STORE_NAME ) )\n\t\t\t\t.getReusableBlocks()\n\t\t\t\t.map( ( userPattern ) =>\n\t\t\t\t\tmapUserPattern(\n\t\t\t\t\t\tuserPattern,\n\t\t\t\t\t\tstate.settings.__experimentalUserPatternCategories\n\t\t\t\t\t)\n\t\t\t\t),\n\t\t\t// This setting is left for back compat.\n\t\t\t...( state.settings.__experimentalBlockPatterns ?? [] ),\n\t\t\t...( state.settings[ selectBlockPatternsKey ]?.( select ) ?? [] ),\n\t\t].filter(\n\t\t\t( x, index, arr ) =>\n\t\t\t\tindex === arr.findIndex( ( y ) => x.name === y.name )\n\t\t);\n\t}, getAllPatternsDependants( select ) )\n);\n\nexport const isResolvingPatterns = createRegistrySelector( ( select ) =>\n\tcreateSelector( ( state ) => {\n\t\tconst blockPatternsSelect = state.settings[ selectBlockPatternsKey ];\n\t\tconst reusableBlocksSelect = state.settings[ reusableBlocksSelectKey ];\n\t\treturn (\n\t\t\t( blockPatternsSelect\n\t\t\t\t? blockPatternsSelect( select ) === undefined\n\t\t\t\t: false ) ||\n\t\t\t( reusableBlocksSelect\n\t\t\t\t? reusableBlocksSelect( select ) === undefined\n\t\t\t\t: false )\n\t\t);\n\t}, getAllPatternsDependants( select ) )\n);\n\nconst EMPTY_ARRAY = [];\n\nexport const getReusableBlocks = createRegistrySelector(\n\t( select ) => ( state ) => {\n\t\tconst reusableBlocksSelect = state.settings[ reusableBlocksSelectKey ];\n\t\treturn reusableBlocksSelect\n\t\t\t? reusableBlocksSelect( select )\n\t\t\t: state.settings.__experimentalReusableBlocks ?? EMPTY_ARRAY;\n\t}\n);\n\n/**\n * Returns the element of the last element that had focus when focus left the editor canvas.\n *\n * @param {Object} state Block editor state.\n *\n * @return {Object} Element.\n */\nexport function getLastFocus( state ) {\n\treturn state.lastFocus;\n}\n\n/**\n * Returns true if the user is dragging anything, or false otherwise. It is possible for a\n * user to be dragging data from outside of the editor, so this selector is separate from\n * the `isDraggingBlocks` selector which only returns true if the user is dragging blocks.\n *\n * @param {Object} state Global application state.\n *\n * @return {boolean} Whether user is dragging.\n */\nexport function isDragging( state ) {\n\treturn state.isDragging;\n}\n\n/**\n * Retrieves the expanded block from the state.\n *\n * @param {Object} state Block editor state.\n *\n * @return {string|null} The client ID of the expanded block, if set.\n */\nexport function getExpandedBlock( state ) {\n\treturn state.expandedBlock;\n}\n\n/**\n * Retrieves the client ID of the ancestor block that is content locking the block\n * with the provided client ID.\n *\n * @param {Object} state    Global application state.\n * @param {Object} clientId Client Id of the block.\n *\n * @return {?string} Client ID of the ancestor block that is content locking the block.\n */\nexport const getContentLockingParent = createSelector(\n\t( state, clientId ) => {\n\t\tlet current = clientId;\n\t\tlet result;\n\t\twhile ( ( current = state.blocks.parents.get( current ) ) ) {\n\t\t\tif (\n\t\t\t\tgetBlockName( state, current ) === 'core/block' ||\n\t\t\t\tgetTemplateLock( state, current ) === 'contentOnly'\n\t\t\t) {\n\t\t\t\tresult = current;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t},\n\t( state ) => [ state.blocks.parents, state.blockListSettings ]\n);\n\n/**\n * Retrieves the client ID of the block that is content locked but is\n * currently being temporarily edited as a non-locked block.\n *\n * @param {Object} state Global application state.\n *\n * @return {?string} The client ID of the block being temporarily edited as a non-locked block.\n */\nexport function getTemporarilyEditingAsBlocks( state ) {\n\treturn state.temporarilyEditingAsBlocks;\n}\n\n/**\n * Returns the focus mode that should be reapplied when the user stops editing\n * a content locked blocks as a block without locking.\n *\n * @param {Object} state Global application state.\n *\n * @return {?string} The focus mode that should be re-set when temporarily editing as blocks stops.\n */\nexport function getTemporarilyEditingFocusModeToRevert( state ) {\n\treturn state.temporarilyEditingFocusModeRevert;\n}\n"],"mappings":"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","ignoreList":[]}