{"version":3,"names":["_element","require","_compose","_blockRefsProvider","useBlockRefProvider","clientId","refsMap","useContext","BlockRefs","useRefEffect","element","set","delete","useBlockRef","latestClientId","useRef","current","useMemo","_refsMap$get","get","useBlockElement","_useObservableValue","useObservableValue"],"sources":["@wordpress/block-editor/src/components/block-list/use-block-props/use-block-refs.js"],"sourcesContent":["/**\n * WordPress dependencies\n */\nimport { useContext, useMemo, useRef } from '@wordpress/element';\nimport { useRefEffect, useObservableValue } from '@wordpress/compose';\n\n/**\n * Internal dependencies\n */\nimport { BlockRefs } from '../../provider/block-refs-provider';\n\n/** @typedef {import('@wordpress/element').RefCallback} RefCallback */\n/** @typedef {import('@wordpress/element').RefObject} RefObject */\n\n/**\n * Provides a ref to the BlockRefs context.\n *\n * @param {string} clientId The client ID of the element ref.\n *\n * @return {RefCallback} Ref callback.\n */\nexport function useBlockRefProvider( clientId ) {\n\tconst { refsMap } = useContext( BlockRefs );\n\treturn useRefEffect(\n\t\t( element ) => {\n\t\t\trefsMap.set( clientId, element );\n\t\t\treturn () => refsMap.delete( clientId );\n\t\t},\n\t\t[ clientId ]\n\t);\n}\n\n/**\n * Gets a ref pointing to the current block element. Continues to return the same\n * stable ref object even if the `clientId` argument changes. This hook is not\n * reactive, i.e., it won't trigger a rerender of the calling component if the\n * ref value changes. For reactive use cases there is the `useBlockElement` hook.\n *\n * @param {string} clientId The client ID to get a ref for.\n *\n * @return {RefObject} A ref containing the element.\n */\nfunction useBlockRef( clientId ) {\n\tconst { refsMap } = useContext( BlockRefs );\n\tconst latestClientId = useRef();\n\tlatestClientId.current = clientId;\n\n\t// Always return an object, even if no ref exists for a given client ID, so\n\t// that `current` works at a later point.\n\treturn useMemo(\n\t\t() => ( {\n\t\t\tget current() {\n\t\t\t\treturn refsMap.get( latestClientId.current ) ?? null;\n\t\t\t},\n\t\t} ),\n\t\t[ refsMap ]\n\t);\n}\n\n/**\n * Return the element for a given client ID. Updates whenever the element\n * changes, becomes available, or disappears.\n *\n * @param {string} clientId The client ID to an element for.\n *\n * @return {Element|null} The block's wrapper element.\n */\nfunction useBlockElement( clientId ) {\n\tconst { refsMap } = useContext( BlockRefs );\n\treturn useObservableValue( refsMap, clientId ) ?? null;\n}\n\nexport { useBlockRef as __unstableUseBlockRef };\nexport { useBlockElement as __unstableUseBlockElement };\n"],"mappings":";;;;;;;;AAGA,IAAAA,QAAA,GAAAC,OAAA;AACA,IAAAC,QAAA,GAAAD,OAAA;AAKA,IAAAE,kBAAA,GAAAF,OAAA;AATA;AACA;AACA;;AAIA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASG,mBAAmBA,CAAEC,QAAQ,EAAG;EAC/C,MAAM;IAAEC;EAAQ,CAAC,GAAG,IAAAC,mBAAU,EAAEC,4BAAU,CAAC;EAC3C,OAAO,IAAAC,qBAAY,EAChBC,OAAO,IAAM;IACdJ,OAAO,CAACK,GAAG,CAAEN,QAAQ,EAAEK,OAAQ,CAAC;IAChC,OAAO,MAAMJ,OAAO,CAACM,MAAM,CAAEP,QAAS,CAAC;EACxC,CAAC,EACD,CAAEA,QAAQ,CACX,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASQ,WAAWA,CAAER,QAAQ,EAAG;EAChC,MAAM;IAAEC;EAAQ,CAAC,GAAG,IAAAC,mBAAU,EAAEC,4BAAU,CAAC;EAC3C,MAAMM,cAAc,GAAG,IAAAC,eAAM,EAAC,CAAC;EAC/BD,cAAc,CAACE,OAAO,GAAGX,QAAQ;;EAEjC;EACA;EACA,OAAO,IAAAY,gBAAO,EACb,OAAQ;IACP,IAAID,OAAOA,CAAA,EAAG;MAAA,IAAAE,YAAA;MACb,QAAAA,YAAA,GAAOZ,OAAO,CAACa,GAAG,CAAEL,cAAc,CAACE,OAAQ,CAAC,cAAAE,YAAA,cAAAA,YAAA,GAAI,IAAI;IACrD;EACD,CAAC,CAAE,EACH,CAAEZ,OAAO,CACV,CAAC;AACF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASc,eAAeA,CAAEf,QAAQ,EAAG;EAAA,IAAAgB,mBAAA;EACpC,MAAM;IAAEf;EAAQ,CAAC,GAAG,IAAAC,mBAAU,EAAEC,4BAAU,CAAC;EAC3C,QAAAa,mBAAA,GAAO,IAAAC,2BAAkB,EAAEhB,OAAO,EAAED,QAAS,CAAC,cAAAgB,mBAAA,cAAAA,mBAAA,GAAI,IAAI;AACvD","ignoreList":[]}