"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _i18n = require("@wordpress/i18n");
var _compose = require("@wordpress/compose");
var _components = require("@wordpress/components");
var _element = require("@wordpress/element");
var _mediaPanel = require("./media-panel");
var _check = _interopRequireDefault(require("../../media-upload/check"));
var _mediaUpload = _interopRequireDefault(require("../../media-upload"));
var _hooks = require("./hooks");
var _utils = require("./utils");
var _mobileTabNavigation = _interopRequireDefault(require("../mobile-tab-navigation"));
var _categoryTabs = _interopRequireDefault(require("../category-tabs"));
var _noResults = _interopRequireDefault(require("../no-results"));
/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

const ALLOWED_MEDIA_TYPES = ['image', 'video', 'audio'];
function MediaTab({
  rootClientId,
  selectedCategory,
  onSelectCategory,
  onInsert,
  children
}) {
  const mediaCategories = (0, _hooks.useMediaCategories)(rootClientId);
  const isMobile = (0, _compose.useViewportMatch)('medium', '<');
  const baseCssClass = 'block-editor-inserter__media-tabs';
  const onSelectMedia = (0, _element.useCallback)(media => {
    if (!media?.url) {
      return;
    }
    const [block] = (0, _utils.getBlockAndPreviewFromMedia)(media, media.type);
    onInsert(block);
  }, [onInsert]);
  const categories = (0, _element.useMemo)(() => mediaCategories.map(mediaCategory => ({
    ...mediaCategory,
    label: mediaCategory.labels.name
  })), [mediaCategories]);
  if (!categories.length) {
    return (0, _react.createElement)(_noResults.default, null);
  }
  return (0, _react.createElement)(_react.Fragment, null, !isMobile && (0, _react.createElement)("div", {
    className: `${baseCssClass}-container`
  }, (0, _react.createElement)(_categoryTabs.default, {
    categories: categories,
    selectedCategory: selectedCategory,
    onSelectCategory: onSelectCategory
  }, children), (0, _react.createElement)(_check.default, null, (0, _react.createElement)(_mediaUpload.default, {
    multiple: false,
    onSelect: onSelectMedia,
    allowedTypes: ALLOWED_MEDIA_TYPES,
    render: ({
      open
    }) => (0, _react.createElement)(_components.Button, {
      onClick: event => {
        // Safari doesn't emit a focus event on button elements when
        // clicked and we need to manually focus the button here.
        // The reason is that core's Media Library modal explicitly triggers a
        // focus event and therefore a `blur` event is triggered on a different
        // element, which doesn't contain the `data-unstable-ignore-focus-outside-for-relatedtarget`
        // attribute making the Inserter dialog to close.
        event.target.focus();
        open();
      },
      className: "block-editor-inserter__media-library-button",
      variant: "secondary",
      "data-unstable-ignore-focus-outside-for-relatedtarget": ".media-modal"
    }, (0, _i18n.__)('Open Media Library'))
  }))), isMobile && (0, _react.createElement)(_mobileTabNavigation.default, {
    categories: categories
  }, category => (0, _react.createElement)(_mediaPanel.MediaCategoryPanel, {
    onInsert: onInsert,
    rootClientId: rootClientId,
    category: category
  })));
}
var _default = exports.default = MediaTab;
//# sourceMappingURL=media-tab.js.map