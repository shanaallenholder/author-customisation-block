{"version":3,"names":["_clsx","_interopRequireDefault","require","_i18n","_icons","_element","_segmentedTextControl","TEXT_ALIGNMENT_OPTIONS","label","__","value","icon","alignLeft","alignCenter","alignRight","alignJustify","DEFAULT_OPTIONS","TextAlignmentControl","className","onChange","options","validOptions","useMemo","filter","option","includes","length","_react","createElement","default","clsx","newValue","undefined"],"sources":["@wordpress/block-editor/src/components/text-alignment-control/index.js"],"sourcesContent":["/**\n * External dependencies\n */\nimport clsx from 'clsx';\n\n/**\n * WordPress dependencies\n */\nimport { __ } from '@wordpress/i18n';\nimport {\n\talignLeft,\n\talignCenter,\n\talignRight,\n\talignJustify,\n} from '@wordpress/icons';\nimport { useMemo } from '@wordpress/element';\n\n/**\n * Internal dependencies\n */\nimport SegmentedTextControl from '../segmented-text-control';\n\nconst TEXT_ALIGNMENT_OPTIONS = [\n\t{\n\t\tlabel: __( 'Align text left' ),\n\t\tvalue: 'left',\n\t\ticon: alignLeft,\n\t},\n\t{\n\t\tlabel: __( 'Align text center' ),\n\t\tvalue: 'center',\n\t\ticon: alignCenter,\n\t},\n\t{\n\t\tlabel: __( 'Align text right' ),\n\t\tvalue: 'right',\n\t\ticon: alignRight,\n\t},\n\t{\n\t\tlabel: __( 'Justify text' ),\n\t\tvalue: 'justify',\n\t\ticon: alignJustify,\n\t},\n];\n\nconst DEFAULT_OPTIONS = [ 'left', 'center', 'right' ];\n\n/**\n * Control to facilitate text alignment selections.\n *\n * @param {Object}   props           Component props.\n * @param {string}   props.className Class name to add to the control.\n * @param {string}   props.value     Currently selected text alignment.\n * @param {Function} props.onChange  Handles change in text alignment selection.\n * @param {string[]} props.options   Array of text alignment options to display.\n *\n * @return {Element} Text alignment control.\n */\nexport default function TextAlignmentControl( {\n\tclassName,\n\tvalue,\n\tonChange,\n\toptions = DEFAULT_OPTIONS,\n} ) {\n\tconst validOptions = useMemo(\n\t\t() =>\n\t\t\tTEXT_ALIGNMENT_OPTIONS.filter( ( option ) =>\n\t\t\t\toptions.includes( option.value )\n\t\t\t),\n\t\t[ options ]\n\t);\n\n\tif ( ! validOptions.length ) {\n\t\treturn null;\n\t}\n\n\treturn (\n\t\t<SegmentedTextControl\n\t\t\tlabel={ __( 'Text alignment' ) }\n\t\t\toptions={ validOptions }\n\t\t\tclassName={ clsx(\n\t\t\t\t'block-editor-text-alignment-control',\n\t\t\t\tclassName\n\t\t\t) }\n\t\t\tvalue={ value }\n\t\t\tonChange={ ( newValue ) => {\n\t\t\t\tonChange( newValue === value ? undefined : newValue );\n\t\t\t} }\n\t\t/>\n\t);\n}\n"],"mappings":";;;;;;;;AAGA,IAAAA,KAAA,GAAAC,sBAAA,CAAAC,OAAA;AAKA,IAAAC,KAAA,GAAAD,OAAA;AACA,IAAAE,MAAA,GAAAF,OAAA;AAMA,IAAAG,QAAA,GAAAH,OAAA;AAKA,IAAAI,qBAAA,GAAAL,sBAAA,CAAAC,OAAA;AApBA;AACA;AACA;;AAGA;AACA;AACA;;AAUA;AACA;AACA;;AAGA,MAAMK,sBAAsB,GAAG,CAC9B;EACCC,KAAK,EAAE,IAAAC,QAAE,EAAE,iBAAkB,CAAC;EAC9BC,KAAK,EAAE,MAAM;EACbC,IAAI,EAAEC;AACP,CAAC,EACD;EACCJ,KAAK,EAAE,IAAAC,QAAE,EAAE,mBAAoB,CAAC;EAChCC,KAAK,EAAE,QAAQ;EACfC,IAAI,EAAEE;AACP,CAAC,EACD;EACCL,KAAK,EAAE,IAAAC,QAAE,EAAE,kBAAmB,CAAC;EAC/BC,KAAK,EAAE,OAAO;EACdC,IAAI,EAAEG;AACP,CAAC,EACD;EACCN,KAAK,EAAE,IAAAC,QAAE,EAAE,cAAe,CAAC;EAC3BC,KAAK,EAAE,SAAS;EAChBC,IAAI,EAAEI;AACP,CAAC,CACD;AAED,MAAMC,eAAe,GAAG,CAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,CAAE;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,SAASC,oBAAoBA,CAAE;EAC7CC,SAAS;EACTR,KAAK;EACLS,QAAQ;EACRC,OAAO,GAAGJ;AACX,CAAC,EAAG;EACH,MAAMK,YAAY,GAAG,IAAAC,gBAAO,EAC3B,MACCf,sBAAsB,CAACgB,MAAM,CAAIC,MAAM,IACtCJ,OAAO,CAACK,QAAQ,CAAED,MAAM,CAACd,KAAM,CAChC,CAAC,EACF,CAAEU,OAAO,CACV,CAAC;EAED,IAAK,CAAEC,YAAY,CAACK,MAAM,EAAG;IAC5B,OAAO,IAAI;EACZ;EAEA,OACC,IAAAC,MAAA,CAAAC,aAAA,EAACtB,qBAAA,CAAAuB,OAAoB;IACpBrB,KAAK,EAAG,IAAAC,QAAE,EAAE,gBAAiB,CAAG;IAChCW,OAAO,EAAGC,YAAc;IACxBH,SAAS,EAAG,IAAAY,aAAI,EACf,qCAAqC,EACrCZ,SACD,CAAG;IACHR,KAAK,EAAGA,KAAO;IACfS,QAAQ,EAAKY,QAAQ,IAAM;MAC1BZ,QAAQ,CAAEY,QAAQ,KAAKrB,KAAK,GAAGsB,SAAS,GAAGD,QAAS,CAAC;IACtD;EAAG,CACH,CAAC;AAEJ","ignoreList":[]}