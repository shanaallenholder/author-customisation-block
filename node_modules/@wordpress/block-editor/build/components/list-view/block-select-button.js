"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = require("react");
var _clsx = _interopRequireDefault(require("clsx"));
var _components = require("@wordpress/components");
var _element = require("@wordpress/element");
var _icons = require("@wordpress/icons");
var _keycodes = require("@wordpress/keycodes");
var _i18n = require("@wordpress/i18n");
var _data = require("@wordpress/data");
var _blockIcon = _interopRequireDefault(require("../block-icon"));
var _useBlockDisplayInformation = _interopRequireDefault(require("../use-block-display-information"));
var _useBlockDisplayTitle = _interopRequireDefault(require("../block-title/use-block-display-title"));
var _expander = _interopRequireDefault(require("./expander"));
var _blockLock = require("../block-lock");
var _useListViewImages = _interopRequireDefault(require("./use-list-view-images"));
var _store = require("../../store");
/**
 * External dependencies
 */

/**
 * WordPress dependencies
 */

/**
 * Internal dependencies
 */

function ListViewBlockSelectButton({
  className,
  block: {
    clientId
  },
  onClick,
  onContextMenu,
  onMouseDown,
  onToggleExpanded,
  tabIndex,
  onFocus,
  onDragStart,
  onDragEnd,
  draggable,
  isExpanded,
  ariaDescribedBy
}, ref) {
  const blockInformation = (0, _useBlockDisplayInformation.default)(clientId);
  const blockTitle = (0, _useBlockDisplayTitle.default)({
    clientId,
    context: 'list-view'
  });
  const {
    isLocked
  } = (0, _blockLock.useBlockLock)(clientId);
  const {
    isContentOnly
  } = (0, _data.useSelect)(select => ({
    isContentOnly: select(_store.store).getBlockEditingMode(clientId) === 'contentOnly'
  }), [clientId]);
  const shouldShowLockIcon = isLocked && !isContentOnly;
  const isSticky = blockInformation?.positionType === 'sticky';
  const images = (0, _useListViewImages.default)({
    clientId,
    isExpanded
  });
  const positionLabel = blockInformation?.positionLabel ? (0, _i18n.sprintf)(
  // translators: 1: Position of selected block, e.g. "Sticky" or "Fixed".
  (0, _i18n.__)('Position: %1$s'), blockInformation.positionLabel) : '';

  // The `href` attribute triggers the browser's native HTML drag operations.
  // When the link is dragged, the element's outerHTML is set in DataTransfer object as text/html.
  // We need to clear any HTML drag data to prevent `pasteHandler` from firing
  // inside the `useOnBlockDrop` hook.
  const onDragStartHandler = event => {
    event.dataTransfer.clearData();
    onDragStart?.(event);
  };

  /**
   * @param {KeyboardEvent} event
   */
  function onKeyDown(event) {
    if (event.keyCode === _keycodes.ENTER || event.keyCode === _keycodes.SPACE) {
      onClick(event);
    }
  }
  return (0, _react.createElement)(_components.Button, {
    className: (0, _clsx.default)('block-editor-list-view-block-select-button', className),
    onClick: onClick,
    onContextMenu: onContextMenu,
    onKeyDown: onKeyDown,
    onMouseDown: onMouseDown,
    ref: ref,
    tabIndex: tabIndex,
    onFocus: onFocus,
    onDragStart: onDragStartHandler,
    onDragEnd: onDragEnd,
    draggable: draggable,
    href: `#block-${clientId}`,
    "aria-describedby": ariaDescribedBy,
    "aria-expanded": isExpanded
  }, (0, _react.createElement)(_expander.default, {
    onClick: onToggleExpanded
  }), (0, _react.createElement)(_blockIcon.default, {
    icon: blockInformation?.icon,
    showColors: true,
    context: "list-view"
  }), (0, _react.createElement)(_components.__experimentalHStack, {
    alignment: "center",
    className: "block-editor-list-view-block-select-button__label-wrapper",
    justify: "flex-start",
    spacing: 1
  }, (0, _react.createElement)("span", {
    className: "block-editor-list-view-block-select-button__title"
  }, (0, _react.createElement)(_components.__experimentalTruncate, {
    ellipsizeMode: "auto"
  }, blockTitle)), blockInformation?.anchor && (0, _react.createElement)("span", {
    className: "block-editor-list-view-block-select-button__anchor-wrapper"
  }, (0, _react.createElement)(_components.__experimentalTruncate, {
    className: "block-editor-list-view-block-select-button__anchor",
    ellipsizeMode: "auto"
  }, blockInformation.anchor)), positionLabel && isSticky && (0, _react.createElement)(_components.Tooltip, {
    text: positionLabel
  }, (0, _react.createElement)(_icons.Icon, {
    icon: _icons.pinSmall
  })), images.length ? (0, _react.createElement)("span", {
    className: "block-editor-list-view-block-select-button__images",
    "aria-hidden": true
  }, images.map((image, index) => (0, _react.createElement)("span", {
    className: "block-editor-list-view-block-select-button__image",
    key: image.clientId,
    style: {
      backgroundImage: `url(${image.url})`,
      zIndex: images.length - index // Ensure the first image is on top, and subsequent images are behind.
    }
  }))) : null, shouldShowLockIcon && (0, _react.createElement)("span", {
    className: "block-editor-list-view-block-select-button__lock"
  }, (0, _react.createElement)(_icons.Icon, {
    icon: _icons.lockSmall
  }))));
}
var _default = exports.default = (0, _element.forwardRef)(ListViewBlockSelectButton);
//# sourceMappingURL=block-select-button.js.map